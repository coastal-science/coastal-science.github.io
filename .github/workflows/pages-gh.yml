# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages and build docker image [GitHub.com]

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main", "gha-docker-prod"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  SERVICE: landing

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  generate-timestamp:
    permissions: {}
    runs-on: ubuntu-latest
    steps:
      - name: Set TIMESTAMP
        id: date
        run: |
             export DATE=$(date +'%Y%m%d-%H%M%S')
             echo "TIMESTAMP=$DATE" >> $GITHUB_ENV
    outputs:
      TIMESTAMP: ${{ env.TIMESTAMP }}

  configure-pages:
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v2
    outputs:
      base_url: ${{ steps.pages.outputs.base_url }}
      
  # Build job
  build-website:
    needs:
      - generate-timestamp
      - configure-pages
    
    runs-on: ubuntu-latest
    container:
      image: peaceiris/hugo

    env:
      HUGO_VERSION: 0.139.4 # latest  #  0.126.1 
      HUGO_FORMS: ${{ vars.HUGO_FORMS }}
      HUGO_GOOGLEANALYTICS: ${{ vars.HUGO_GOOGLEANALYTICS }}

    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: read
    
    steps:
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: Pre-Build ls
        run: |
          ls -lah
          echo "${{ needs.generate-timestamp.outputs.TIMESTAMP }}" from env
          echo "${{ needs.configure-pages.outputs.base_url }}/" from env

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true  # Fetch Hugo themes (true OR recursive) # failing on ubuntu container
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod
          # set-safe-directory: '/__w/coastal-science.github.io/coastal-science.github.io'
          
      - name: Set safe directory workaround
        run: |
          git config --global --add safe.directory /__w/coastal-science.github.io/coastal-science.github.io
          
      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: staging
          HUGO_ENV: staging
        run: |
          hugo \
            --gc \
            --buildDrafts \
            --minify \
            --baseURL "${{ needs.configure-pages.outputs.base_url }}/"
            
      - name: Post-Build ls
        run: ls -lah public/

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy-gh-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: write
      id-token: write
      pages: write
    runs-on: ubuntu-latest
    needs: build-website
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create and publish a prod docker image          
  build_and_push_prod_image:
    environment: docker-image

    if: github.ref == 'refs/heads/gha-docker-prod'
    needs:
      - generate-timestamp
    env:
      HUGO_VERSION: 0.139.4 # latest  #  0.126.1 
      HUGO_FORMS: ${{ vars.HUGO_FORMS }}
      HUGO_GOOGLEANALYTICS: ${{ vars.HUGO_GOOGLEANALYTICS }}
      
      REGISTRY: ghcr.io # docker.github.sfu.ca 
      IMAGE_NAME: ${{ github.repository }}

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true  # Fetch Hugo themes (true OR recursive) # failing on ubuntu container
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod
          # set-safe-directory: '/__w/coastal-science.github.io/coastal-science.github.io'
          
      - name: Set safe directory workaround
        run: |
          git config --global --add safe.directory /__w/coastal-science.github.io/coastal-science.github.io
      
      - name: Generate tags
        id: tags
        run: |
            # Get the current branch name
            branch_name=$(git rev-parse --abbrev-ref HEAD)
            # docker tag limit is 128 characters
            # The timestamp (YYYY_MM_DD_HH_MM_SS), commit id (7), 
            # and punctuation (additional _) take up 29 characters.
            # For 3 catalogs the branch names is can occupy the 
            # remaining characters = floor((128-29*3)/3) = 13
            branch_name=${branch_name:0:13} 

            # Get the abbreviated commit hash
            commit_hash=$(git rev-parse --short HEAD)
            
            # Get the current commit datetime (without timezone)
            commit_date=$(git show -s --format=%ci HEAD)
            
            # remove last five characters (timezone information)
            commit_date=${commit_date:0:${#commit_date}-5} #-5 digits causes 'expression < 0' error. Instead dynamically get the string length.
            
            
            # Combine the parts into the desired format
            result="${branch_name}_${commit_hash}_${commit_date}"
            
            # remove leading/trailing spaces
            # formatted_result=$(awk '{$1=$1;print}')
            formatted_result=$(echo $result | xargs)
            # Replace spaces, colons, and dashes with underscores
            formatted_result=$(echo "$formatted_result" | sed 's/[ :\-]/_/g')
            
            branch_name=$(echo $branch_name | xargs)
            branch_name=$(echo "$branch_name" | sed 's/[ :\-]/_/g')
            
            commit_hash=$(echo $commit_hash | xargs)
            commit_hash=$(echo "$commit_hash" | sed 's/[ :\-]/_/g')
            
            commit_date=$(echo $commit_date | xargs)
            commit_date=$(echo "$commit_date" | sed 's/[ :\-]/_/g')
            
            # Print the final result and return it
            echo "$formatted_result"
            
            echo "TAG=${TAG-random}" >> "$GITHUB_OUTPUT"
            echo "EXTRA_TAG=${EXTRA_TAG}" >> "$GITHUB_OUTPUT"
            echo "branch_name=${branch_name}" >> "$GITHUB_OUTPUT"
            echo "commit_hash=${commit_hash}" >> "$GITHUB_OUTPUT"
            echo "commit_date=${commit_date}" >> "$GITHUB_OUTPUT"

      - name: List repos in workspace
        run: |
          ls -lah
          du -sh *
          echo The current workspace repo is..
          pwd

      # GH Actions
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: Build and Minify with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ env.HUGO_BASEURL }}/"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
     
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3 #343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build website with Dockerfile.prod
        env:
          HUGO_BASEURL: "${{ vars.HUGO_BASEURL }}"
          ORIGINS: "${{ vars.ORIGINS }}"
          OAUTH_CLIENT_ID: "${{ vars.OAUTH_GITHUB_CLIENT_ID }}"
          OAUTH_GITHUB_CLIENT_SECRET: "${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}"
          CMS_BACKEND_DEBUG: ${{ vars.CMS_BACKEND_DEBUG || ''}}
          
        run: |
          docker compose -f docker-compose.yaml -f docker-compose.override.yaml build website
          docker tag website ${{ steps.meta.outputs.tags }}
          docker tag website ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.branch_name }}
          docker tag website ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.commit_hash }}
          docker tag website ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.commit_date }}
          
          docker push --all-tags ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  
  # Create and publish a prod docker image          
  deploy_prod_image:
    environment: docker-image

    if: github.ref == 'refs/heads/main'
    needs:
      - build_and_push_prod_image
    env:      
      REGISTRY: ghcr.io # docker.github.sfu.ca 
      IMAGE_NAME: ${{ github.repository }}

    runs-on: self-hosted
    permissions:
      contents: read
      packages: read
      
    steps:
      - name: Deploy backend nomad job
        run: |
          echo "Attempting backend deployment: population=${{ env.IMAGE_NAME }}"
          
          # cd call-library/nomad/

          # export POPULATION=${{ vars.POPULATION }}; 
          # export TYPE=${{ steps.type-of-build.outputs.TYPE_OF_BUILD }}; 
          # envsubst < call-catalogue-single.nomad.template > $POPULATION-call-catalogue-$TYPE.nomad

          # nomad job stop -address="http://192.168.245.224:4646" -token=${{ secrets.NOMAD_TOKEN }} \
          #     $POPULATION-call-catalogue-$TYPE || true
          # nomad run -verbose -address="http://192.168.245.224:4646" -token=${{ secrets.NOMAD_TOKEN }} \
          #     -var "type=${{ steps.type-of-build.outputs.TYPE_OF_BUILD }}" \
          #     -var "population=${{ vars.POPULATION }}" \
          #     $POPULATION-call-catalogue-$TYPE.nomad

          # echo deployed to https://${{ vars.POPULATION }}-${{ steps.type-of-build.outputs.TYPE_OF_BUILD }}.***.***.ca
          # cd -

  # Create and publish a docker image          
  build_and_push_image:
    if: false
    needs:
      - generate-timestamp
      - build-website

    runs-on: ubuntu-latest

    # Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
    env:
      REGISTRY: docker.github.sfu.ca #ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      packages: write
      
    outputs:
      tags: ${{ steps.meta.outputs.tags }}

    steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ env.SERVICE }}
          labels: |
            org.opencontainers.image.version=${{ needs.generate-timestamp.outputs.TIMESTAMP }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Cleanup workspace on the runner
  cleanup:
    # if: ${{ always() }}
    permissions: {}
    needs: 
      - build-website
      - deploy-gh-pages
      - build_and_push_image
    runs-on: ubuntu-latest
    steps:
      - name: Current workspace
        run: du -shc ${GITHUB_WORKSPACE}
      - name: Clean Up Docker Images
        run: docker rmi -f $(docker images '${{ needs.build_and_push_image.outputs.tags }}' -a -q)
      - name: Clean Up Workspace
        run: rm -rf ${GITHUB_WORKSPACE}
